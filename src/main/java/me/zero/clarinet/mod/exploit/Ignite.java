package me.zero.clarinet.mod.exploit;

import java.util.ArrayList;

import org.lwjgl.input.Keyboard;

import me.zero.clarinet.event.api.EventTarget;
import me.zero.clarinet.event.api.types.EventType;

import me.zero.clarinet.event.player.EventMotionUpdate;
import me.zero.clarinet.mod.Category;
import me.zero.clarinet.mod.Mod;
import me.zero.clarinet.mod.PremiumMod;
import me.zero.clarinet.util.BlockUtils;
import me.zero.clarinet.util.CombatUtils;
import me.zero.clarinet.util.RotationUtils;
import me.zero.clarinet.util.TimerUtil;
import me.zero.clarinet.util.entity.EntityFilter;
import me.zero.values.types.BooleanValue;
import me.zero.values.types.NumberValue;
import net.minecraft.block.Block;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemFlintAndSteel;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

public class Ignite extends Mod implements PremiumMod {
	
	private ArrayList<EntityLivingBase> targets = new ArrayList<EntityLivingBase>();
	
	private EntityLivingBase target = null;
	
	private IgniteEntityFilter filter = new IgniteEntityFilter();
	
	private TimerUtil switcher = new TimerUtil();
	
	private TimerUtil ignite = new TimerUtil();
	
	private int index = 0;
	
	private BooleanValue teammates = new BooleanValue(this, "Teammates", "teammates");
	private BooleanValue invisible = new BooleanValue(this, "Invisibles", "invisible");
	private BooleanValue sleeping = new BooleanValue(this, "Sleeping", "sleeping");
	private BooleanValue friends = new BooleanValue(this, "Friends", "friends");
	private BooleanValue players = new BooleanValue(this, "Players", "players", true);
	private BooleanValue mobs = new BooleanValue(this, "Mobs", "mobs", true);
	private BooleanValue animals = new BooleanValue(this, "Animals", "animals", true);
	
	private NumberValue range = new NumberValue(this, "Range", "range", 3D, 4D, 6D, 0.25D);
	private NumberValue fov = new NumberValue(this, "FOV", "fov", 360D, 45D, 360D, 1D);
	
	public Ignite() {
		super("Ignite", "Lights players around you on fire if you have flint n' steel on your hotbar", Keyboard.KEY_NONE, Category.EXPLOIT);
	}
	
	@EventTarget
	public void onMotionUpdate(EventMotionUpdate event) {
		int slot = getFlintNSteel();
		if (slot > -1 && slot < 9) {
			targets = CombatUtils.getCloseEntities(range, fov, filter);
			if (targets.size() <= 0) return;
			target = targets.get(index);
			if (target != null) {
				BlockPos pos = new BlockPos(target.posX, target.posY - 1, target.posZ);
				Block below = BlockUtils.getBlock(pos);
				Block block = BlockUtils.getBlockUnderEntity(target, 0);
				boolean check = below != null && block != Blocks.FIRE;
				if (check) {
					if (event.type == EventType.PRE) {
						mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
						float[] rotations = RotationUtils.getRotations(pos);
						event.yaw = rotations[0];
						event.pitch = rotations[1];
					}
					if (event.type == EventType.POST) {
						mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(pos, EnumFacing.UP, EnumHand.MAIN_HAND, 0, 0, 0));
						mc.player.connection.sendPacket(new CPacketHeldItemChange(mc.player.inventory.currentItem));
					}
				}
			}
			if (switcher.speed(8)) {
				incrementIndex();
				switcher.reset();
			}
		}
	}
	
	public int getFlintNSteel() {
		int slot = -1;
		for (int i = 0; i < 9; i++) {
			ItemStack stack = mc.player.inventory.mainInventory.get(i);
			if (stack != null && stack.getItem() != null) {
				Item hand = stack.getItem();
				if (hand instanceof ItemFlintAndSteel) {
					return i;
				}
			}
		}
		return slot;
	}
	
	public void incrementIndex() {
		index++;
		if (index >= targets.size() - 1) {
			index = 0;
		}
	}
	
	public class IgniteEntityFilter extends EntityFilter {
		
		@Override
		public boolean walls() {
			return false;
		}
		
		@Override
		public boolean sleeping() {
			return sleeping.getValue();
		}
		
		@Override
		public boolean invisibles() {
			return invisible.getValue();
		}
		
		@Override
		public boolean teammates() {
			return teammates.getValue();
		}
		
		@Override
		public boolean friends() {
			return friends.getValue();
		}
		
		@Override
		public boolean players() {
			return players.getValue();
		}
		
		@Override
		public boolean animals() {
			return animals.getValue();
		}
		
		@Override
		public boolean hostiles() {
			return mobs.getValue();
		}
		
		@Override
		public boolean passives() {
			return false;
		}
	}
}
